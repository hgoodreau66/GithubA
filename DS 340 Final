{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scripts related to venv\n",
    "### Open a terminal\n",
    "- .venv\\Scripts\\activate\n",
    "- py -m pip install --upgrade pip\n",
    "- py -m pip install requests\n",
    "- py -m pip freeze > requirements.txt\n",
    "- py -m pip install -r requirements.txt\n",
    "\n",
    "# AWS Article\n",
    "- https://induraj2020.medium.com/how-to-access-the-s3-bucket-using-python-ecdbe5ebc45f"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Music Genre Classification\n",
    "In this notebook I tried to learn the basic concepts of neural networks and use it to classify the music files in dataset. Majorly this notebook can be divided into 3 parts:\n",
    "\n",
    "   1) Using ANN \n",
    "\n",
    "   2) Tackling overfitting with ANN\n",
    "\n",
    "   3) Using CNN\n",
    "\n",
    "\n",
    "Also to read the dataset I have used librosa library which only read files <1Mb and one file is greater than the size giving error due to which I have ignored it. The dataset contains the following genres, the keys being the prediction targets\n",
    "    \n",
    "    0: \"disco\",\n",
    "    1: \"metal\",\n",
    "    2: \"reggae\",\n",
    "    3: \"blues\",\n",
    "    4: \"rock\",\n",
    "    5: \"classical\",\n",
    "    6: \"jazz\",\n",
    "    7: \"hiphop\",\n",
    "    8: \"country\",\n",
    "    9: \"pop\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "_cell_guid": "01a50213-fe5d-431b-9ade-28c438b3bceb",
    "_uuid": "f32a1031-9332-42b6-8335-dee2b86310a3",
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import librosa\n",
    "from PIL import Image\n",
    "import boto3\n",
    "import math\n",
    "import json\n",
    "import matplotlib.pyplot as plt\n",
    "import io\n",
    "import numpy as np\n",
    "import warnings \n",
    "import requests\n",
    "import pandas as pd\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_image(bucket_name, image_key, target_size=(128, 128)):\n",
    "    s3 = boto3.client('s3')\n",
    "    image_data = s3.get_object(Bucket=bucket_name, Key=image_key)['Body'].read()\n",
    "\n",
    "    image = Image.open(io.BytesIO(image_data)).convert('RGB')\n",
    "\n",
    "    image = image.resize(target_size)\n",
    "\n",
    "    return np.array(image) / 255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_images(bucket_name, dataset_path, target_size=(128, 128)):\n",
    "    images = []\n",
    "    labels = []\n",
    "    label_mapping = {}\n",
    "    s3 = boto3.client('s3')\n",
    "    paginator = s3.get_paginator('list_objects_v2')\n",
    "\n",
    "    for i, page in enumerate(paginator.paginate(Bucket=bucket_name, Prefix=dataset_path)):\n",
    "        if 'Contents' not in page:\n",
    "            continue\n",
    "        \n",
    "        for obj in page['Contents']:\n",
    "            image_key = obj['Key']\n",
    "            if image_key.endswith(\".png\"):\n",
    "                genre_label = image_key.split('/')[-2]\n",
    "\n",
    "                if genre_label not in label_mapping:\n",
    "                    label_mapping[genre_label] = len(label_mapping)\n",
    "\n",
    "                image_array = load_image(bucket_name, image_key, target_size)\n",
    "\n",
    "                images.append(image_array)\n",
    "                labels.append(label_mapping[genre_label])\n",
    "\n",
    "    return np.array(images), np.array(labels)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "images, labels = load_images(bucket_name='flights12345', dataset_path=r\"Data/images_original\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(999, 128, 128, 3)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "images.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classifier\n",
    "This part uses the concepts of ANN with keras and sequential layers. I have also done splitting in the ratio 70:30\n",
    "\n",
    "The model is Sequential and architecture only has Flatten and the Dense layers available in keras for the basic ANN representation. As it is naive model we can expect it to be overfit. Info on the layers can be found [here](https://machinelearningknowledge.ai/different-types-of-keras-layers-explained-for-beginners/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load data\n",
    "def load_data(dataset_path):\n",
    "    data = requests.get(dataset_path).json()\n",
    "    \n",
    "    # Convert list to numpy arrays\n",
    "    inputs = np.array(data[\"mfcc\"])\n",
    "    targets = np.array(data[\"labels\"])\n",
    "    \n",
    "    return inputs,targets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs, targets = load_data(\"https://flights12345.s3.us-east-1.amazonaws.com/Data/data.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6990, 130, 13) (6990,)\n"
     ]
    }
   ],
   "source": [
    "# splitting the data\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "input_train, input_test, target_train, target_test = train_test_split(inputs, targets, test_size=0.3)\n",
    "print(input_train.shape, target_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras import Sequential\n",
    "from tensorflow.keras.layers import * "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1690</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">865,792</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,448</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">650</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1690\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │       \u001b[38;5;34m865,792\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │       \u001b[38;5;34m131,328\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │        \u001b[38;5;34m16,448\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │           \u001b[38;5;34m650\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,014,218</span> (3.87 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,014,218\u001b[0m (3.87 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,014,218</span> (3.87 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,014,218\u001b[0m (3.87 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(Flatten(input_shape=(inputs.shape[1],inputs.shape[2])))\n",
    "model.add(Dense(512, activation='relu'))\n",
    "model.add(Dense(256, activation='relu'))\n",
    "model.add(Dense(64, activation='relu'))\n",
    "model.add(Dense(10, activation='softmax'))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras import optimizers\n",
    "adam = optimizers.Adam(learning_rate=1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer=adam,\n",
    "             loss=\"sparse_categorical_crossentropy\",\n",
    "             metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer=adam,\n",
    "             loss=\"sparse_categorical_crossentropy\",\n",
    "             metrics=[\"accuracy\"])\n",
    "\n",
    "hist = model.fit(input_train, target_train,\n",
    "                 validation_data = (input_test,target_test),\n",
    "                 epochs = 50,\n",
    "                 batch_size = 32)\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_history(hist):\n",
    "    plt.figure(figsize=(20,15))\n",
    "    fig, axs = plt.subplots(2)\n",
    "    # accuracy subplot\n",
    "    axs[0].plot(hist.history[\"accuracy\"], label=\"train accuracy\")\n",
    "    axs[0].plot(hist.history[\"val_accuracy\"], label=\"test accuracy\")    \n",
    "    axs[0].set_ylabel(\"Accuracy\")\n",
    "    axs[0].legend(loc=\"lower right\")\n",
    "    axs[0].set_title(\"Accuracy eval\")\n",
    "    \n",
    "    # Error subplot\n",
    "    axs[1].plot(hist.history[\"loss\"], label=\"train error\")\n",
    "    axs[1].plot(hist.history[\"val_loss\"], label=\"test error\")    \n",
    "    axs[1].set_ylabel(\"Error\")\n",
    "    axs[1].set_xlabel(\"Epoch\")\n",
    "    axs[1].legend(loc=\"upper right\")\n",
    "    axs[1].set_title(\"Error eval\")\n",
    "    \n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 2000x1500 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_history(hist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m94/94\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.6191 - loss: 2.6452\n",
      "Test accuracy: 0.6201602220535278\n"
     ]
    }
   ],
   "source": [
    "test_error, test_accuracy = model.evaluate(input_test, target_test, verbose=1)\n",
    "print(f\"Test accuracy: {test_accuracy}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Overfitting\n",
    "This part deals with the overfitting of the previous model. We can deal with it by majorly doing the following process.\n",
    "- Making architecture less complicated \n",
    "- Using augmented data\n",
    "- Early stopping of training\n",
    "- Adding dropout layers\n",
    "- Regularization / Standardization  \n",
    "\n",
    "I have added the dropout layers and kernel_regularizers as compared to previous naive model giving the dropout probability as 30%\n",
    "Kernel_regularizers is one of the 3 type of regularizer used to impose penalties. More info can be found [here](https://medium.com/@robertjohn_15390/regularization-in-tensorflow-using-keras-api-48aba746ae21)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow.keras as keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential_1\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ flatten_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1690</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">865,792</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,448</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">330</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ flatten_1 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1690\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │       \u001b[38;5;34m865,792\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │       \u001b[38;5;34m131,328\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │        \u001b[38;5;34m16,448\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_7 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m2,080\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_8 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │           \u001b[38;5;34m330\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,015,978</span> (3.88 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,015,978\u001b[0m (3.88 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,015,978</span> (3.88 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,015,978\u001b[0m (3.88 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Overfitting\n",
    "model = Sequential()\n",
    "\n",
    "model.add(Flatten(input_shape=(inputs.shape[1],inputs.shape[2])))\n",
    "model.add(Dense(512, activation='relu', kernel_regularizer = keras.regularizers.l2(0.001)))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Dense(256, activation='relu', kernel_regularizer = keras.regularizers.l2(0.003)))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Dense(64, activation='relu', kernel_regularizer = keras.regularizers.l2(0.01)))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Dense(32, activation='relu'))\n",
    "model.add(Dense(10, activation='softmax'))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = optimizers.Adam()\n",
    "optimizer.build(model.trainable_variables)\n",
    "\n",
    "model.compile(optimizer=optimizer,\n",
    "             loss=\"sparse_categorical_crossentropy\",\n",
    "             metrics=[\"accuracy\"])\n",
    "\n",
    "\n",
    "hist = model.fit(input_train, target_train,\n",
    "                 validation_data = (input_test,target_test),\n",
    "                 epochs = 50,\n",
    "                 batch_size = 32)\n",
    "\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 2000x1500 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_history(hist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m94/94\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4233 - loss: 1.6935\n",
      "Test accuracy: 0.44092121720314026\n"
     ]
    }
   ],
   "source": [
    "test_error, test_accuracy = model.evaluate(input_test, target_test, verbose=1)\n",
    "print(f\"Test accuracy: {test_accuracy}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the overfitting is greatly reduced but still we are not able to get a good accuracy. Now we will try doing it with Convolutional Neural Network (CNN)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CNN\n",
    "Using keras layers of Conv2D, MaxPool2D, BatchNormalization.\n",
    "\n",
    "CNN layers takes input primarily in 3D shape, so we again have to prepare the dataset in the form and for that, I have used np.newaxis function which adds a column/layer in the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_dataset(test_size, validation_size):\n",
    "    X, y = load_data(\"https://flights12345.s3.us-east-1.amazonaws.com/Data/data.json\")\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = test_size)\n",
    "    X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = validation_size)\n",
    "    X_train = X_train[..., np.newaxis]\n",
    "    X_val = X_val[..., np.newaxis]\n",
    "    X_test = X_test[..., np.newaxis]\n",
    "\n",
    "    return X_train, X_val, X_test, y_train, y_val, y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_val, X_test, y_train, y_val, y_test = prepare_dataset(0.25, 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(130, 13, 1)\n"
     ]
    }
   ],
   "source": [
    "input_shape = (X_train.shape[1],X_train.shape[2],X_train.shape[3])\n",
    "print(input_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential_2\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)    │           <span style=\"color: #00af00; text-decoration-color: #00af00\">640</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)      │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">62</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,464</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">31</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">31</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │           <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │         <span style=\"color: #00af00; text-decoration-color: #00af00\">4,128</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_2           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │           <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)      │           <span style=\"color: #00af00; text-decoration-color: #00af00\">528</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_3           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)       │            <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">650</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m64\u001b[0m)    │           \u001b[38;5;34m640\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m64\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m64\u001b[0m)      │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m62\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │        \u001b[38;5;34m18,464\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m31\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m31\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │           \u001b[38;5;34m128\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │         \u001b[38;5;34m4,128\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m15\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_2           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m15\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │           \u001b[38;5;34m128\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m15\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m16\u001b[0m)      │           \u001b[38;5;34m528\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_3 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m16\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_3           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m16\u001b[0m)       │            \u001b[38;5;34m64\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten_2 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_9 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_10 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │           \u001b[38;5;34m650\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">33,242</span> (129.85 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m33,242\u001b[0m (129.85 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">32,954</span> (128.73 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m32,954\u001b[0m (128.73 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">288</span> (1.12 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m288\u001b[0m (1.12 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Conv2D(64, (3, 3), activation = \"relu\", input_shape = input_shape))\n",
    "model.add(MaxPool2D((3, 3), strides=(2, 2), padding=\"same\"))\n",
    "model.add(BatchNormalization())\n",
    "\n",
    "model.add(Conv2D(32, (3, 3), activation = \"relu\"))\n",
    "model.add(MaxPool2D((3, 3), strides=(2, 2), padding=\"same\"))\n",
    "model.add(BatchNormalization())\n",
    "\n",
    "model.add(Conv2D(32, (2, 2), activation = \"relu\"))\n",
    "model.add(MaxPool2D((2, 2), strides=(2, 2), padding=\"same\"))\n",
    "model.add(BatchNormalization())\n",
    "\n",
    "model.add(Conv2D(16, (1, 1), activation = \"relu\"))\n",
    "model.add(MaxPool2D((1, 1), strides=(2, 2), padding=\"same\"))\n",
    "model.add(BatchNormalization())\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(64, activation=\"relu\"))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Dense(10, activation=\"softmax\"))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 19ms/step - accuracy: 0.2893 - loss: 2.0561 - val_accuracy: 0.4967 - val_loss: 1.3788\n",
      "Epoch 2/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.4927 - loss: 1.4078 - val_accuracy: 0.5073 - val_loss: 1.3694\n",
      "Epoch 3/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.5626 - loss: 1.2323 - val_accuracy: 0.5507 - val_loss: 1.2211\n",
      "Epoch 4/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.5938 - loss: 1.1285 - val_accuracy: 0.6542 - val_loss: 1.0276\n",
      "Epoch 5/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.6342 - loss: 1.0376 - val_accuracy: 0.5841 - val_loss: 1.2154\n",
      "Epoch 6/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.6728 - loss: 0.9239 - val_accuracy: 0.6883 - val_loss: 0.8843\n",
      "Epoch 7/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.6875 - loss: 0.8803 - val_accuracy: 0.6782 - val_loss: 0.9249\n",
      "Epoch 8/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 22ms/step - accuracy: 0.7031 - loss: 0.8485 - val_accuracy: 0.6736 - val_loss: 0.9022\n",
      "Epoch 9/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 23ms/step - accuracy: 0.7221 - loss: 0.8039 - val_accuracy: 0.7029 - val_loss: 0.8562\n",
      "Epoch 10/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 22ms/step - accuracy: 0.7500 - loss: 0.7377 - val_accuracy: 0.6816 - val_loss: 0.9217\n",
      "Epoch 11/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.7430 - loss: 0.7541 - val_accuracy: 0.7009 - val_loss: 0.8823\n",
      "Epoch 12/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.7623 - loss: 0.6886 - val_accuracy: 0.7570 - val_loss: 0.7226\n",
      "Epoch 13/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.7614 - loss: 0.6826 - val_accuracy: 0.6829 - val_loss: 1.0102\n",
      "Epoch 14/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.7777 - loss: 0.6396 - val_accuracy: 0.7457 - val_loss: 0.7505\n",
      "Epoch 15/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.7697 - loss: 0.6936 - val_accuracy: 0.7069 - val_loss: 0.9184\n",
      "Epoch 16/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.7899 - loss: 0.5931 - val_accuracy: 0.7370 - val_loss: 0.8156\n",
      "Epoch 17/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.7977 - loss: 0.5864 - val_accuracy: 0.7690 - val_loss: 0.7206\n",
      "Epoch 18/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8070 - loss: 0.5612 - val_accuracy: 0.7510 - val_loss: 0.7886\n",
      "Epoch 19/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8176 - loss: 0.5438 - val_accuracy: 0.7637 - val_loss: 0.7919\n",
      "Epoch 20/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8279 - loss: 0.4914 - val_accuracy: 0.7517 - val_loss: 0.7556\n",
      "Epoch 21/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.8258 - loss: 0.5064 - val_accuracy: 0.7750 - val_loss: 0.7028\n",
      "Epoch 22/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.8320 - loss: 0.4779 - val_accuracy: 0.7644 - val_loss: 0.7075\n",
      "Epoch 23/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8286 - loss: 0.5189 - val_accuracy: 0.7296 - val_loss: 0.8730\n",
      "Epoch 24/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8449 - loss: 0.4462 - val_accuracy: 0.7657 - val_loss: 0.7729\n",
      "Epoch 25/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.8252 - loss: 0.4833 - val_accuracy: 0.7864 - val_loss: 0.6542\n",
      "Epoch 26/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.8504 - loss: 0.4332 - val_accuracy: 0.7530 - val_loss: 0.7766\n",
      "Epoch 27/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.8603 - loss: 0.4076 - val_accuracy: 0.7336 - val_loss: 0.9519\n",
      "Epoch 28/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8546 - loss: 0.4212 - val_accuracy: 0.7550 - val_loss: 0.8926\n",
      "Epoch 29/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8572 - loss: 0.4106 - val_accuracy: 0.7543 - val_loss: 0.8267\n",
      "Epoch 30/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.8554 - loss: 0.4120 - val_accuracy: 0.7623 - val_loss: 0.7824\n",
      "Epoch 31/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8683 - loss: 0.3816 - val_accuracy: 0.7737 - val_loss: 0.7767\n",
      "Epoch 32/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8622 - loss: 0.3824 - val_accuracy: 0.7770 - val_loss: 0.8172\n",
      "Epoch 33/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.8662 - loss: 0.3871 - val_accuracy: 0.7650 - val_loss: 0.8036\n",
      "Epoch 34/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 23ms/step - accuracy: 0.8791 - loss: 0.3348 - val_accuracy: 0.7390 - val_loss: 0.9535\n",
      "Epoch 35/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step - accuracy: 0.8767 - loss: 0.3406 - val_accuracy: 0.7517 - val_loss: 0.8980\n",
      "Epoch 36/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 24ms/step - accuracy: 0.8845 - loss: 0.3383 - val_accuracy: 0.7670 - val_loss: 0.7918\n",
      "Epoch 37/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 24ms/step - accuracy: 0.8771 - loss: 0.3552 - val_accuracy: 0.7750 - val_loss: 0.8022\n",
      "Epoch 38/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 25ms/step - accuracy: 0.8866 - loss: 0.3252 - val_accuracy: 0.7824 - val_loss: 0.7452\n",
      "Epoch 39/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 24ms/step - accuracy: 0.8854 - loss: 0.3113 - val_accuracy: 0.7891 - val_loss: 0.7723\n",
      "Epoch 40/40\n",
      "\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 23ms/step - accuracy: 0.8866 - loss: 0.3093 - val_accuracy: 0.7684 - val_loss: 0.8241\n"
     ]
    }
   ],
   "source": [
    "optimizer = optimizers.Adam()\n",
    "optimizer.build(model.trainable_variables)\n",
    "\n",
    "model.compile(optimizer=optimizer,\n",
    "              loss=\"sparse_categorical_crossentropy\",\n",
    "              metrics=[\"accuracy\"])\n",
    "\n",
    "hist = model.fit(X_train, y_train,\n",
    "                 validation_data = (X_val, y_val),\n",
    "                 epochs = 40,\n",
    "                 batch_size = 32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 2000x1500 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_history(hist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m79/79\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.7799 - loss: 0.7956\n",
      "Test accuracy: 0.7573087811470032\n"
     ]
    }
   ],
   "source": [
    "test_error, test_accuracy = model.evaluate(X_test, y_test, verbose=1)\n",
    "print(f\"Test accuracy: {test_accuracy}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(model, X, y):\n",
    "    X = X[np.newaxis,...]\n",
    "    prediction = model.predict(X)\n",
    "    predicted_index = np.argmax(prediction, axis=1)\n",
    "    print(f\"Expected index: {y}, Predicted index: {predicted_index}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 124ms/step\n",
      "Expected index: 9, Predicted index: [9]\n"
     ]
    }
   ],
   "source": [
    "predict(model, X_test[10], y_test[10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see the accuracy has improved by Significant amount but still the accuracy is not enough, in the future of this notebook I am planning to implement RNN model in this and finally use the ensembling to get a push in accuracy. However any other suggestions are always invited!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
